package main

import (
	"fmt"
	"net/http"
	"net/url"
	"io/ioutil"
)

var daziku []string = []string{
	"威", "普", "伟", "齐", "豪", "派", "菲", "莱", "三", "典", "昇", "云", 
	"骏", "比", "半", "千", "英", "霖", "池", "诚", "姝", 
	"人", "亿", "合", "宏", "运", "唐", "爱", "汇", 
	"久", "颖", "韦", "兰", "格", "秀", "宜", "涛",
	"德", "仁", "巨", "高", "中", "联", "湾", "君", 
	"刚", "上", "九", "维", "丰", "旌", "资", "岚", "潮", 
	"惠", "卓", "傲", "静", "艳", "琪", "康", "罗", "用", "昌", 
	"春", "辉", "鸿", "巧", "频", "益", "焰", "佩", "纽", "博", 
	"圆", "驰", "长", "登", "秋", "行", "风", "磊", 
	"法", "恋", "清", "协", "津", "宇", "鲜", "冠", 
	"皇", "台", "品", "洋", "欧", "浓", "星", "达", "琦", "垒", 
	"优", "晶", "禾", "凯", "禹", "来", "垠", "花", "霸",
	"碧", "能", "卉", "启", "聚", "义", "州", "彭", "曼", "思", 
	"楷", "巴", "芙", "尚", "通", "明", "佳", "满", "聂", "珲", 
	"渲", "黄", "梦", "儒", "度", "道", "控", "域", "此", "特", 
	"环", "信", "升", "铭", "传", "隆", "贵", "雅", "闪", "兴", 
	"赢", "银", "鹰", "志", "宝", "帝", "仙", "旋", "使", "姿", 
	"佰", "旭", "同", "帆", "翼", "盛", "鹏", "亭", "量", "福", 
	"厅", "麦", "漠", "邦", "下", "焊", "尔", "强", "港", "嘉", 
	"如", "莲", "颜", "致", "城", "蔚", "瑶", "年", "气", "霆", 
	"徕", "咪", "森", "蓝", "民", "添", "鼎", "华", "承", "宁", 
	"逸", "假", "圣", "干", "艾", "超", "香", "诗", "谊", "彩", 
	"轩", "晓", "亚", "元", "成", "营", "万", "腾", "凤", "昱", 
	"仪", "策", "融", "统", "和", "骥", "索", "姆", "扬", "里", 
	"程", "竹", "迎", "文", "存", "睿", "电", "公", "壹", "精", 
	"易", "泉", "网", "润", "谦", "御", "微", "管", "石", "朗", 
	"键", "虹", "神", "食", "玫", "阔", "原", "舒", "赫", "恩", 
	"舰", "凡", "政", "影", "群", "雨", "间", "伊", "智", "乐", 
	"富", "马", "先", "缘", "茜", "好", "玛", "菁", "必", 
	"裕", "立", "飞", "生", "迷", "瑰", "相", "跃", "誉", 
	"蕾", "尼", "研", "纵", "横", "瀚", "至", "广", "捷", "显", 
	"浩", "发", "予", "灵", "顿", "坚", "翔", "今", "晴", "略", 
	"开", "蒂", "基", "红", "朵", "迪", "正", "洲", "羽", "际", 
	"帕", "阁", "画", "胤", "鑫", "叶", "双", "倍", "客", "弘", 
	"彬", "骁", "古", "翰", "祥", "会", "业", "湘", "越", "视", 
	"萌", "拉", "族", "氏", "禧", "铁", "国", "淼", "东", "克", 
	"瑞", "贝", "晋", "丞", "哲", "本", "悦", "沃", "昂", "芬", 
	"缇", "阳", "心", "定", "士", "安", "江", "牛", "纳", "大", 
	"夏", "米", "妁", "贤", "燕", "分", "硕", "景", "胜", "见", 
	"仕", "川", "锐", "图", "卡", "尧", "水", "与", "冯", "的", 
	"百", "洛", "蔷", "漫", "洪", "曙", "尊", "亨", "纪", "时", 
	"畅", "茂", "欣", "雪", "杜", "施", "迈", "力", "泽", "庆", 
	"昊", "零", "光", "一", "意", "为", "具", "迅", "加", "浴", 
	"远", "茵", "麒", "源", "振", "奇", "浪", "耀", "多", 
	"园", "然", "卫", "忆", "岛", "邑", "薇", "事", "北", "建", 
	"杰", "汉", "河", "众", "毅", "韵", "奥", "茁", "话", "全", 
	"友", "复", "禄", "芝", "白", "南", "吉", "洁", "衡", "领", 
	"斯", "钧", "科", "林", "倾", "才", "深", "斐", "利", "真", 
	"引", "柏", "凌", "永", "喜", "恒", "厚", "家", "殿", "诺", 
	"之", "戒", "旺", "舟", "属", "路", "雷", "府", "月", "荣", 
	"日", "笑", "丽", "翌", "金", "宗", "慧", "泰", "乾", 
	"青", "集", "艺", "赛", "辰", "露", "巍", "沐", "波", "麟", 
	"海", "速", "顺", "创", "世", "天", "财", "美", "新", 
	"未", "湖", "航", "妙", "寿", "西", "语", "盈", "钊", "方", 
	"龙", "讯", "拓", "兆", "煌", "峻", "耐", "墨", 
}

var want []string = []string{
	// "伊", "兰", "光", "艾", "夏",
	"艾",
}

var kuxuan []string = []string{
	"雷", "秀", "彩", "阳", "嘉", "酷", "奥", "易", "华", "众", "月", "宇", "力", "世", "超", "耐",
	"源", "海", "天", "茂", "凌", "仙", "斯", "静", "远", "迅", "越", "零", "克", "赫", "优", "迈", 
	"宏", "碧", "速", "艾", "沃", "新", "浪", "豪", "辉", "颜", "兆", "百", "卓", "迪", "帝", "畅", 
	"顺", "特", "韵", "耀", "锐", "佳", "雪", "领", "古", "闪", "大", "洋", "欧", "漫", "纳", "伊", 
	"方", "霖", "卡", "盈", "多", "美", "川", "瑞", "荣", "量", "尚", "龙", "聚", "奇", "英", "永", 
	"轩", "骏", "拓", "悦", "青", "元", "妙", "杜", "灵", "巴", "慧", "拽", "姿", "翔", "衡", "菲",
	"欣", "乐", "翼", "羽", "联", "尔", "毅", "胜", "明", "视", "安", "意", "威", "杰", "水", "邦", 
	"贝", "梦", "旋", "逸", "光", "狂", "双", "智", "派", "脉", "炫", "洛", "腾", "格", "夏", "波", 
	"动", "艳", "旭", "泰", "心", "族", "乾", "深", "星", "凯", "德", "霸", 
}

func main(){
	// quchong(kuxuan)
	// two(kuxuan)
	// two2(kuxuan)
	// three(kuxuan)
	three2(kuxuan)
	// four(kuxuan)
	// lanzhu(daziku)
	// iwant(daziku)
	// qichacha()

}

func urlds(){
	urlStr := "https://www.tianyancha.com/search?key=%E9%9B%B6%E5%85%89+%E7%A7%91%E6%8A%80"
	l, err := url.ParseQuery(urlStr)
	fmt.Println(l, err)
	l2, err2 := url.ParseRequestURI(urlStr)
	fmt.Println(l2, err2)
    l3, err3 := url.Parse(urlStr)
    fmt.Println("l3 = ", l3, err3)
    fmt.Println(l3.Path)
    fmt.Println(l3.RawQuery)
    fmt.Println(l3.Query())
    fmt.Println(l3.Query().Encode())
}

func qichacha(){
	resp, err := http.Get("https://www.tianyancha.com/search?key=%E9%9B%B7%E5%B0%9A%E8%BF%AA%20%E7%A7%91%E6%8A%80")
	if err != nil {
        // handle error
	}
	
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// handle error
	}
	fmt.Println(string(body))
}

func iwant(ziku []string){
	i := 0
	for _, a := range want {
		for _, b := range ziku{
			for _, c := range ziku{
				fmt.Print(a, b, c, " ")
				i++
				if i%20 == 0{
					fmt.Println()
				}
			}
		}
	}
}

func lanzhu(ziku []string){
	i:=0
	for _, a := range ziku {
		fmt.Print("兰", a ,"竹", " ")
		i++
		if i%20 == 0{
			fmt.Println()
		}
	}
}

func three2(ziku []string){
	i := 0
	// for _, a := range ziku {
		// for _, b := range ziku{
			for _, c := range ziku{
				fmt.Print("伊", "脉", c,  " ")
				i++
				if i%20 == 0{
					fmt.Println()
				}
			}
			i=0
			for _, c := range ziku{
				fmt.Print("伊", c, "脉",  " ")
				i++
				if i%20 == 0{
					fmt.Println()
				}
			}
			i=0
			for _, c := range ziku{
				fmt.Print(c, "伊", "脉",  " ")
				i++
				if i%20 == 0{
					fmt.Println()
				}
			}
		// }
	// }
}

func two2(ziku []string){
	i := 0
	for _, b := range ziku{
		fmt.Print(b, "迈", " ")
		i++
		if i%20 == 0{
			fmt.Println()
		}
	}
}

func two(ziku []string){
	i := 0
	for _, a := range ziku {
		for _, b := range ziku{
			fmt.Print(a, b, " ")
			i++
			if i%20 == 0{
				fmt.Println()
			}
		}
	}
}

func three(ziku []string){
	i := 0
	for _, a := range ziku {
		for _, b := range ziku{
			for _, c := range ziku{
				fmt.Print(a, b, c, " ")
				i++
				if i%20 == 0{
					fmt.Println()
				}
			}
		}
	}
}

func four(ziku []string){
	i := 0
	for _, a := range ziku {
		for _, b := range ziku{
			for _, c := range ziku{
				for _, d := range ziku{
					fmt.Print(a, b, c, d, " ")
					i++
					if i%20 == 0{
						fmt.Println()
					}
				}
			}
		}
	}
}

func quchong(ziku []string){
	newziku := make(map[string]int)
	a := 0
	for i, zi := range ziku {
		a++
		fmt.Println(i, " - ", zi)
		newziku[zi] = a
	}

	fmt.Println("----------------")

	b := 0
	for k, _ := range newziku{
		// fmt.Println(k, " - ", v)
		fmt.Print("\"" + k + "\", ")
		b++
		if b%16 == 0{
			fmt.Println()
		}
		
	}
	fmt.Println()

	fmt.Println(len(ziku), " : ", len(newziku))
}